{"version":3,"sources":["suduku.js","solver.js","app.js","index.js"],"names":["sudoku","arr","list","map","val","slice","check","x","y","value","roundByThree","num","parseInt","thirdArr","flat","includes","solve","coordList","length","i","rowArr","colArr","idx","innerGrid","j","push","nonZeroArray","filter","Set","size","TypeError","checkValid","result","keys","zeroCoords","forEach","Error","Solver","initialValue","container","React","useRef","useState","data","setData","focusCoords","solved","setSolved","handleChange","evt","target","dataset","row","col","nativeEvent","inputType","newData","test","Number","useEffect","current","selector","document","querySelector","focus","Fragment","ref","className","onKeyDown","code","toLowerCase","startsWith","type","onFocus","parentElement","classList","add","onBlur","remove","onChange","Math","random","style","backgroundColor","onClick","error","setTimeout","App","Root","StrictMode","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bd4f10eb.chunk.js","sourcesContent":["export function sudoku(arr) {\r\n    let list = arr.map((val) => val.slice());\r\n    function checkValid() {\r\n        let rowArr = list.map((val) => val.slice());\r\n        let colArr = list.map((val, idx) => list.map((val) => val[idx]));\r\n        let innerGrid = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                innerGrid.push(\r\n                    list\r\n                        .slice(i * 3, i * 3 + 3)\r\n                        .map((val) => val.slice(j * 3, j * 3 + 3))\r\n                        .flat()\r\n                );\r\n            }\r\n        }\r\n        for (let i of [...rowArr, ...colArr, ...innerGrid]) {\r\n            let nonZeroArray = i.filter((val) => val !== 0);\r\n            if (new Set(nonZeroArray).size !== nonZeroArray.length) {\r\n                throw new TypeError('wrong input');\r\n            }\r\n        }\r\n    }\r\n    // retrive the value which is to be determined.\r\n    function zeroCoords() {\r\n        let result = [];\r\n        for (let i of list.keys()) {\r\n            for (let j of list[i].keys()) {\r\n                list[i][j] === 0 ? result.push({ x: i, y: j }) : void 0;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function check(x, y, value) {\r\n        function roundByThree(num) {\r\n            return (num + 1) % 3 === 0\r\n                ? (num + 1) / 3 - 1\r\n                : parseInt((num + 1) / 3);\r\n        }\r\n        const thirdArr = list\r\n            .slice(3 * roundByThree(x), 3 * roundByThree(x) + 3)\r\n            .map((val) =>\r\n                val.slice(3 * roundByThree(y), 3 * roundByThree(y) + 3)\r\n            )\r\n            .flat();\r\n        return (\r\n            !list[x].includes(value) &&\r\n            !list.map((val) => val[y]).includes(value) &&\r\n            !thirdArr.includes(value)\r\n        );\r\n    }\r\n    function solve(coordList) {\r\n        if (coordList.length < 1) return true;\r\n        const { x, y } = coordList[0];\r\n        for (let i = 1; i < 10; i++) {\r\n            if (check(x, y, i) === true) {\r\n                list[x][y] = i;\r\n                if (solve(coordList.slice(1)) === true) {\r\n                    return true;\r\n                }\r\n                list[x][y] = 0;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function main() {\r\n        checkValid();\r\n        solve(zeroCoords());\r\n        list.forEach((val) =>\r\n            val.forEach((val) => {\r\n                if (val === 0) throw new Error('No solution can be found');\r\n            })\r\n        );\r\n        return list;\r\n    }\r\n    return main();\r\n}\r\n","import 'animate.css';\r\nimport React from 'react';\r\nimport { sudoku } from './suduku';\r\n\r\nconst Solver = () => {\r\n    let initialValue = [\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    ];\r\n    let container = React.useRef(null);\r\n    const [data, setData] = React.useState(initialValue);\r\n    const focusCoords = React.useRef([0, 0]);\r\n    const [solved, setSolved] = React.useState(false);\r\n    React.useEffect(() => {\r\n        const [row, col] = focusCoords.current;\r\n        const selector = `.row:nth-child(${row + 1}) .col:nth-child(${\r\n            col + 1\r\n        }) input`;\r\n        document.querySelector(selector)?.focus();\r\n    }, [data]);\r\n    function handleChange(evt) {\r\n        const { row, col } = evt.target.dataset;\r\n        if (evt.nativeEvent.inputType === 'deleteContentBackward') {\r\n            setData((data) => {\r\n                let newData = data.map((val) => val.slice());\r\n                newData[row][col] = 0;\r\n                return newData;\r\n            });\r\n            return false;\r\n        }\r\n        if (/\\d/.test(evt.target.value) === false) {\r\n            return false;\r\n        }\r\n        setData((data) => {\r\n            let newData = data.map((val) => val.slice());\r\n            newData[row][col] = Number(evt.target.value.slice(-1));\r\n            return newData;\r\n        });\r\n    }\r\n    function handleKeydown(evt) {\r\n        let code = evt.code.toLowerCase();\r\n        let [row, col] = focusCoords.current;\r\n        if (code.startsWith('arrow')) {\r\n            if (code === 'arrowup') {\r\n                if (row - 1 < 0) {\r\n                    return false;\r\n                }\r\n                focusCoords.current = [row - 1, col];\r\n            } else if (code === 'arrowdown') {\r\n                if (row + 1 > 8) {\r\n                    return false;\r\n                }\r\n                focusCoords.current = [row + 1, col];\r\n            } else if (code === 'arrowleft') {\r\n                if (col - 1 < 0) {\r\n                    return false;\r\n                }\r\n                focusCoords.current = [row, col - 1];\r\n            } else if (code === 'arrowright') {\r\n                if (col + 1 > 8) {\r\n                    return false;\r\n                }\r\n                focusCoords.current = [row, col + 1];\r\n            }\r\n            setData(data.slice());\r\n        }\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <div\r\n                ref={container}\r\n                className='container animate__animated animate__fast'\r\n                onKeyDown={handleKeydown}\r\n            >\r\n                {data.map((val, row) => {\r\n                    return (\r\n                        <div className='row' key={Math.random()}>\r\n                            {val.map((val, col) => {\r\n                                return (\r\n                                    <div className='col' key={Math.random()}>\r\n                                        <div className='word'>\r\n                                            <input\r\n                                                type='text'\r\n                                                onFocus={(evt) => {\r\n                                                    evt.target.parentElement.parentElement.classList.add(\r\n                                                        'active'\r\n                                                    );\r\n                                                    const { row, col } =\r\n                                                        evt.target.dataset;\r\n                                                    focusCoords.current = [\r\n                                                        +row,\r\n                                                        +col,\r\n                                                    ];\r\n                                                }}\r\n                                                onBlur={(evt) => {\r\n                                                    evt.target.parentElement.parentElement.classList.remove(\r\n                                                        'active'\r\n                                                    );\r\n                                                }}\r\n                                                data-row={row}\r\n                                                data-col={col}\r\n                                                value={val === 0 ? '' : val}\r\n                                                onChange={handleChange}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n            <button\r\n                style={{ backgroundColor: solved ? 'red' : 'greenyellow' }}\r\n                onClick={() => {\r\n                    if (solved === false) {\r\n                        try {\r\n                            setData(sudoku(data));\r\n                        } catch (error) {\r\n                            container.current.classList.add('animate__shakeX');\r\n                            container.current.classList.add('danger');\r\n                            setData(initialValue);\r\n                            setTimeout(() => {\r\n                                container.current.classList.remove(\r\n                                    'animate__shakeX'\r\n                                );\r\n                                container.current.classList.remove('danger');\r\n                            }, 1000);\r\n                            focusCoords.current = [0, 0];\r\n                            return false;\r\n                        }\r\n                    } else {\r\n                        setData(initialValue);\r\n                        focusCoords.current = [0, 0];\r\n                    }\r\n                    setSolved(!solved);\r\n                }}\r\n            >\r\n                {!solved ? 'Solve' : 'Reset'}\r\n            </button>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Solver;\r\n","import React from 'react'\r\nimport \"./css/style.css\"\r\nimport Solver from \"./solver.js\"\r\nconst App = () => {\r\n    return (\r\n        <div>\r\n         <h1>Sudoku Solver</h1>\r\n        <Solver></Solver>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\nconst Root = () => {\r\n    return (\r\n        <React.StrictMode>\r\n            <App></App>\r\n        </React.StrictMode>\r\n    );\r\n};\r\nReactDOM.render(<Root></Root>, document.getElementById('root'));\r\n"],"sourceRoot":""}