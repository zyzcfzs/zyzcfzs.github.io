{"version":3,"sources":["redux/action.js","utils.js","components/header/header.js","components/editor.js","components/previewer.js","redux/reducer.js","redux/store.js","app.js","index.js"],"names":["toggleAction","item","type","expandCheck","mode","name","hideElement","hide","className","TEXT","Header","title","dispatch","useDispatch","React","useState","active","setActive","iconName","onClick","toLowerCase","Editor","useSelector","state","toggle","utils","textValue","setTextValue","id","value","onChange","evt","data","target","Previewer","text","dangerouslySetInnerHTML","__html","defaultText","marked","breaks","gfm","xhtml","defaultToggle","rootReducer","combineReducers","store","createStore","App","Root","StrictMode","ReactDOM","render","document","getElementById"],"mappings":"oNAMO,SAASA,EAAaC,GACzB,MAAO,CACHC,KAAK,SACLD,QCTD,SAASE,EAAYC,EAAKC,GAC7B,OAAOD,IAASC,EAAO,SAAW,GAE/B,SAASC,EAAYC,EAAKC,GAC7B,OAAOD,EAAOC,EAAY,QAAUA,EAEjC,IAAMC,EAAK,ypC,eCuBHC,EAzBA,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACRC,EAAWC,cACjB,EAA4BC,IAAMC,UAAS,GAA3C,mBAAOC,EAAP,KAAeC,EAAf,KACMC,EAAWF,EAAS,uBAAyB,kBACnD,OACI,mCACI,+BACI,mBAAGR,UAAU,0BADjB,IAC+CG,KAE/C,wBACIQ,QAAS,WACL,IAAe,IAAXH,EAEA,OADAJ,EAASZ,EAAa,WACfiB,GAAWD,GAEtBJ,EAASZ,EAAaW,EAAMS,gBAC5BH,GAAWD,IAPnB,SAUI,mBAAGR,UAAS,cAASU,WCOtBG,EAzBA,WACX,IAAMT,EAAWC,cACTT,EAASkB,aAAY,SAACC,GAAD,OAAWA,EAAMC,UAAtCpB,KACR,EAAiCU,IAAMC,SAASU,GAAhD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,OACI,sBACInB,UACIiB,EAA2B,YAATrB,EAAoB,uBAF9C,UAKI,cAAC,EAAD,CAAQO,MAAM,WACd,0BACIiB,GAAG,SACHC,MAAOH,EACPlB,UAAWiB,EAAkBrB,EAAM,UACnC0B,SAAU,SAACC,GACPnB,EHpBT,CACHV,KAAK,OACL8B,KGkBgCD,EAAIE,OAAOJ,QAC/BF,EAAaI,EAAIE,OAAOJ,cCE7BK,EApBG,WACd,IAAMC,EAAOb,aAAY,SAACC,GAAD,OAAWA,EAAMY,QAClC/B,EAASkB,aAAY,SAACC,GAAD,OAAWA,EAAMC,UAAtCpB,KACR,OACI,sBACII,UAAWiB,EACE,WAATrB,EACA,0BAHR,UAMI,cAAC,EAAD,CAAQO,MAAM,YACd,qBACIH,UAAWiB,EAAkBrB,EAAM,WACnCgC,wBAAyB,CAAEC,OAAQF,GACnCP,GAAG,gB,8BCfbU,EAAcC,IAAO9B,EAAM,CAC7B+B,QAAQ,EACRC,KAAK,EACLC,OAAO,IAELC,EAAgB,CAClBvC,KAAM,UAkBH,IAAMwC,EAAcC,YAAgB,CACvCV,KAjBJ,WAA2D,IAAtCZ,EAAqC,uDAA7Be,EAA6B,yCAAdpC,EAAc,EAAdA,KAAM8B,EAAQ,EAARA,KAC9C,MAAa,SAAT9B,EACOqC,IAAOP,EAAM,CAChBS,KAAK,EACLD,QAAQ,EACRE,OAAO,IAGRnB,GAUPC,OARJ,WAA+D,IAAxCD,EAAuC,uDAA/BoB,EAA+B,yCAAdzC,EAAc,EAAdA,KAAMD,EAAQ,EAARA,KAClD,MAAa,WAATC,EACO,2BAAKqB,GAAZ,IAAmBnB,KAAMH,IAEtBsB,KCvBEuB,EAAQC,YACjBH,GCYWI,G,MATH,WACR,OACO,eAAC,IAAD,CAAUF,MAAOA,EAAjB,UACC,cAAC,EAAD,IACA,cAAC,EAAD,SCPNG,EAAO,WACT,OACI,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,OAIZC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.bd771665.chunk.js","sourcesContent":["export function textAction(data){\r\n    return {\r\n        type:\"TEXT\",\r\n        data\r\n    }\r\n}\r\nexport function toggleAction(item){\r\n    return {\r\n        type:\"TOGGLE\",\r\n        item\r\n    }\r\n}","export function expandCheck(mode,name) {\r\n    return mode === name ? 'expand' : '';\r\n}\r\nexport function hideElement(hide,className){\r\n    return hide ? className + \" none\" : className\r\n}\r\nexport const TEXT= `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.org), and\r\n> Block Quotes!\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n\r\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\r\n`","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleAction } from '../../redux/action';\r\nimport './header.css';\r\nconst Header = ({ title }) => {\r\n    const dispatch = useDispatch();\r\n    const [active, setActive] = React.useState(true);\r\n    const iconName = active ? 'fa-expand-arrows-alt' : 'fa-compress-alt';\r\n    return (\r\n        <header>\r\n            <h2>\r\n                <i className='fab fa-free-code-camp'></i> {title}\r\n            </h2>\r\n            <button\r\n                onClick={() => {\r\n                    if (active === false) {\r\n                        dispatch(toggleAction('origin'));\r\n                        return setActive(!active);\r\n                    }\r\n                    dispatch(toggleAction(title.toLowerCase()));\r\n                    setActive(!active);\r\n                }}\r\n            >\r\n                <i className={`fas ${iconName}`}></i>\r\n            </button>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { textAction } from '../redux/action';\r\nimport * as utils from '../utils';\r\nimport Header from './header/header';\r\nconst Editor = () => {\r\n    const dispatch = useDispatch();\r\n    const { mode } = useSelector((state) => state.toggle);\r\n    const [textValue,setTextValue] = React.useState(utils.TEXT)\r\n    return (\r\n        <div\r\n            className={\r\n                utils.hideElement(mode === 'preview', 'editor shadow-block')\r\n            }\r\n        >\r\n            <Header title='Editor'></Header>\r\n            <textarea\r\n                id='editor'\r\n                value={textValue}\r\n                className={utils.expandCheck(mode, 'editor')}\r\n                onChange={(evt) => {\r\n                    dispatch(textAction(evt.target.value));\r\n                    setTextValue(evt.target.value)\r\n\r\n                }}\r\n            ></textarea>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Editor;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport * as utils from '../utils';\r\nimport Header from './header/header';\r\nconst Previewer = () => {\r\n    const text = useSelector((state) => state.text);\r\n    const { mode } = useSelector((state) => state.toggle);\r\n    return (\r\n        <div\r\n            className={utils.hideElement(\r\n                mode === 'editor',\r\n                'previewer shadow-block'\r\n            )}\r\n        >\r\n            <Header title='Preview'></Header>\r\n            <div\r\n                className={utils.expandCheck(mode, 'preview')}\r\n                dangerouslySetInnerHTML={{ __html: text }}\r\n                id='preview'\r\n            ></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Previewer;\r\n","import marked from 'marked';\r\nimport { combineReducers } from 'redux';\r\nimport { TEXT } from '../utils';\r\nconst defaultText = marked(TEXT, {\r\n    breaks: true,\r\n    gfm: true,\r\n    xhtml: true,\r\n});\r\nconst defaultToggle = {\r\n    mode: 'origin',\r\n};\r\nfunction textReducer(state = defaultText, { type, data }) {\r\n    if (type === 'TEXT') {\r\n        return marked(data, {\r\n            gfm: true,\r\n            breaks: true,\r\n            xhtml: true,\r\n        });\r\n    }\r\n    return state;\r\n}\r\nfunction toggleReducer(state = defaultToggle, { type, item }) {\r\n    if (type === 'TOGGLE') {\r\n        return { ...state, mode: item };\r\n    }\r\n    return state;\r\n}\r\nexport const rootReducer = combineReducers({\r\n    text: textReducer,\r\n    toggle: toggleReducer,\r\n});\r\n","import { createStore } from 'redux';\r\nimport { rootReducer } from './reducer';\r\nexport const store = createStore(\r\n    rootReducer,\r\n);\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport Editor from './components/editor';\r\nimport Previewer from './components/previewer';\r\nimport { store } from \"./redux/store\";\r\nimport \"./style.css\";\r\nconst App = () => {\r\n    return (\r\n           <Provider store={store}>\r\n            <Editor></Editor>\r\n            <Previewer></Previewer>\r\n           </Provider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\nconst Root = () => {\r\n    return (\r\n        <React.StrictMode >\r\n            <App />\r\n        </React.StrictMode>\r\n    )\r\n}\r\nReactDOM.render(<Root />,document.getElementById(\"root\"))\r\n\r\n"],"sourceRoot":""}